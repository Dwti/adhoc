package test_d;

import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import sun.misc.BASE64Decoder;

public class test {

	public static SecretKey securekey;
	
	public static String DecryptDate(String cryptdata) {
        try {
            byte[] base64 = new BASE64Decoder().decodeBuffer(cryptdata);
            SecureRandom random = new SecureRandom();
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(Cipher.DECRYPT_MODE, securekey, random);
            return new String(cipher.doFinal(base64), "UTF-8");

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
	public static void main(String[] args) {
		
		String test="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";
		
		
		try {
			byte[] eckey = "ws3edaw4".getBytes();
			DESKeySpec deskey = new DESKeySpec(eckey);
			SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
			securekey = keyFactory.generateSecret(deskey);

			String res = DecryptDate(test);
			System.out.println(res);
		} catch (Exception e) {
            e.printStackTrace();
        }
	}
}